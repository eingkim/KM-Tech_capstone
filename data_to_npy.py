# -*- coding: utf-8 -*-
"""data_to_npy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14STF6iM9BzXykgReZWwHCoIiae_9m-Sn
"""

import numpy as np
import pandas as pd
from google.colab import files

inf = 10000 # inf 최대값 지정 (inf = 최대값)

data_raw = {
    ### ↓↓시리얼 통신 출력 데이터 복붙 하는곳↓↓ ###
    '01:09:19': [0001.10, 3922.11, 5322.49, 3244.96, 4134.93, 4122.32, 4127.32, 0, 25.00],
    '01:09:23': [1001.10, 3922.11, 5322.49, 3244.96, 4134.93, 6432.55, 4127.32, 0, 25.25],
    '01:09:30': [2001.05, 5122.99, 2352.25, 4459.23, 3551.74, 5632.14, 3861.65, 0, 25],
    '01:09:36': [3001.11, 3002.22, 3003.33, 3004.44, 3005.55, 6614.22, 3006.66, 0, 25],
    '01:09:44': [4001.11, 4002.22, 2352.25, 4459.23, 3551.74, 5614.22, 3861.65, 0, 25],
    '01:10:10': [5001.11, 5122.99, 2352.25, 4459.23, 3551.74, 7614.22, 3861.65, 0, 25],
    '01:10:21': [6001.87, 8244.14, 8451.53, inf, 7853.43, 6614.22, 7997.00, 1, 25],
    '01:10:25': [7001.78, inf, 7682.11, 6932.89, inf, 69614.22, 7686.26, 2, 25],
    '01:10:30': [8001.87, 8244.14, 8451.53, inf, 7853.43, 6614.22, 7997.00, 1, 25],
    '01:10:36': [9001.87, 9244.14, 9451.53, 8614.22, inf, 7853.43, 7997.00, 1, 25],
    '01:10:43': [1101.78, 1153.43, inf, 3612.22, 6932.89, inf, 7686.26, 2, 25],
    '01:10:49': [1201.53, 9001.44, 7682.11, 9614.22, 6932.89, 9744.11, 7686.26, 0, 25],
    '01:10:58': [1301.53, 9001.44, 7682.11, 6932.89, 9744.11, 8614.22, 8831.55, 0, 25]
    ### ↑↑시리얼 통신 출력 데이터 복붙 하는곳↑↑ ###
}

### ↓↓판단할 데이터의 개수 (3차원 데이터) ###
judging_data = 4
### ↑↑판단할 데이터의 개수 (3차원 데이터) ###

### ↓↓주파수 개수 (20kHz 근처에 40번 증가시키면 41 입력) ###
features = 7
### ↑↑주파수 개수 (20kHz 근처에 40번 증가시키면 41 입력) ###

### ↓↓건조 완료된 시간 입력 ###
dried_time = '01:10:21'
### ↑↑건조 완료된 시간 입력 ###

### ↓↓파일 저장할 경로 입력 ###
path = './'
### ↑↑파일 저장할 경로 입력 ###


features += 2
batch = len(data_raw)-judging_data+1
data = np.zeros((batch, judging_data, features))


target = {}                    # 딕셔너리 형으로 라벨 만들기
for t in data_raw:
    target[t] = {'target': 0}

for key in target.keys():
    if key >= dried_time:
        target[key] = {'target': 1}
target = list(target.values())
        

label = np.zeros((batch, 1)) # 넘파이 배열로 라벨 만들기
for i in range(batch):
    label[i][0] = target[i+judging_data-1]['target']


for num1 in range(batch):   # 라벨을 제외한 데이터 전처리
    cnt = 0
    for num2 in range(judging_data):
        if cnt >= judging_data:
            break
        data[num1][num2] = data_raw[list(data_raw.keys())[num1+cnt]]
        cnt += 1

print(data.ndim)

print(data[:][:][:-1])

data /= inf   # 0~10,000 사이의 값으로
for num1 in range(batch):
  for num2 in range(judging_data):
    data[num1][num2][features-1] *= inf
    data[num1][num2][features-1] /= features-2
##### 전처리 완료 #####

np.save(path + 'data', data)
np.save(path + 'label', label)
files.download('data.npy')
files.download('label.npy')
##### 넘파이로 저장 완료 #####

# 파일 불러내 확인하고 싶으면 아래 주석 해제하고 실행해 볼 것
#files.upload()

tmp = np.load(path + 'data.npy')
print(tmp.shape)
print(tmp)
#files.upload()
tmp = np.load(path + 'label.npy')
print(tmp.shape)
print(tmp)


print('batch = {}'.format(batch))
print('judging_data = {}'.format(judging_data))
print('features = {}'.format(features))
# 프린트된 데이터 복붙해서 학습 파일에 붙여넣을 것

