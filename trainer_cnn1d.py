# -*- coding: utf-8 -*-
"""trainer_CNN1D.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E4HqBobvAcJTBGH-FTEzkkYZPRQD1VB7
"""

import numpy as np
from tensorflow.keras import layers, models
import tensorflow as tf
from google.colab import files
from sklearn.model_selection import train_test_split
"""
gpus = tf.config.experimental.list_physical_devices('GPU')
if gpus:
    try:
        # Currently, memory growth needs to be the same across GPUs
        for gpu in gpus:
            tf.config.experimental.set_memory_growth(gpu, True)
        logical_gpus = tf.config.experimental.list_logical_devices('GPU')
        print(len(gpus), "Physical GPUs,", len(logical_gpus), "Logical GPUs")
    except RuntimeError as e:
        # Memory growth must be set before GPUs have been initialized
        print(e)
"""
files.upload()
files.upload()
data = np.load('./data.npy')
labels = np.load('./label.npy')

batch = 10
judging_data = 4
features = 43

data = data.reshape((batch, judging_data, features))
labels = labels.reshape((batch, 1))

# data /= 10000 # 이미 정규화

train_data, test_data, train_labels, test_labels = train_test_split(data, labels, test_size = 0.2, random_state = 42)

"""
np.random.seed(42)
train_index = np.random.choice(len(data),int(len(data)*0.8),replace=False)
train_data = data[train_index]
train_labels = labels[train_index]
test_index = np.setdiff1d(np.arange(len(data)),train_index)
test_data = data[test_index]
test_labels = labels[test_index]
"""

print(train_data)
#print(train_index)
print(train_labels)
print(labels)
print(data.shape)
model = models.Sequential()
model.add(layers.Conv1D(8, 2, activation='relu', input_shape=(judging_data, features), padding="same"))
model.add(layers.AvgPool1D(2))
model.add(layers.Conv1D(8, 1, activation='relu', padding="same"))
#model.add(layers.AvgPool1D(2))
#model.add(layers.Conv1D(8, 1, activation='relu'))


model.add(layers.Flatten())
model.add(layers.Dense(4, activation='relu'))
model.add(layers.Dense(2, activation='relu'))
model.summary()

model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

model.fit(train_data, train_labels, epochs=5)

test_loss, test_acc = model.evaluate(test_data,  test_labels, verbose=2)

print(test_acc)

model.save('test_model.h5')

"""# 새 섹션"""

model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

model.fit(train_data, train_labels, epochs=5)

test_loss, test_acc = model.evaluate(test_data,  test_labels, verbose=2)

print(test_acc)

model.save('CNN1D_model.h5')

print(train_data.ndim)

